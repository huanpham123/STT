import os
import uuid
import time
import logging
from flask import Flask, request, jsonify, render_template # ƒê√£ th√™m render_template
import speech_recognition as sr
import threading
import wave
import io

# --- Kh·ªüi t·∫°o Flask App ---
app = Flask(__name__)
app.logger.setLevel(logging.INFO)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(threadName)s - %(message)s')

# --- C·∫•u h√¨nh ---
app.config["MAX_CONTENT_LENGTH"] = 5 * 1024 * 1024  # Gi·ªõi h·∫°n upload 5MB
TMP_DIR = "/tmp"  # Vercel cho ph√©p ghi v√†o /tmp
if not os.path.exists(TMP_DIR):
    os.makedirs(TMP_DIR, exist_ok=True)

# --- File WAV im l·∫∑ng ƒë·ªÉ Warm-up Recognizer ---
SILENT_WAV_PATH = os.path.join(TMP_DIR, "silent_warmup_stt.wav")

def create_silent_wav(path, duration=0.1, sample_rate=16000):
    try:
        n_channels = 1
        sampwidth = 2  # 16-bit
        n_frames = int(duration * sample_rate)
        comp_type = "NONE"
        comp_name = "not compressed"
        with wave.open(path, 'wb') as wf:
            wf.setnchannels(n_channels)
            wf.setsampwidth(sampwidth)
            wf.setframerate(sample_rate)
            wf.setnframes(n_frames)
            wf.setcomptype(comp_type, comp_name)
            wf.writeframes(b'\x00\x00' * n_frames)
        app.logger.info(f"File WAV im l·∫∑ng ƒë√£ t·∫°o t·∫°i: {path}")
        return True
    except Exception as e:
        app.logger.error(f"Kh√¥ng th·ªÉ t·∫°o file WAV im l·∫∑ng: {e}", exc_info=True)
        return False

if not create_silent_wav(SILENT_WAV_PATH):
    app.logger.warning("Kh√¥ng th·ªÉ t·∫°o file WAV im l·∫∑ng. Vi·ªác warm-up recognizer c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng.")

# --- Pool cho Recognizer ---
class RecognizerPool:
    def __init__(self, pool_size=2, max_pool_size=5): # Gi·∫£m size cho m√¥i tr∆∞·ªùng resource h·∫°n ch·∫ø
        self.initial_pool_size = pool_size
        self.max_pool_size = max_pool_size
        self.pool = []
        self.lock = threading.Lock()
        self._initialize_pool()
        self.warm_up_all_recognizers_in_pool()

    def _initialize_pool(self):
        with self.lock:
            self.pool = [sr.Recognizer() for _ in range(self.initial_pool_size)]
        app.logger.info(f"RecognizerPool ƒë√£ kh·ªüi t·∫°o v·ªõi {self.initial_pool_size} instance.")

    def _warm_up_single_recognizer(self, recognizer):
        if not os.path.exists(SILENT_WAV_PATH):
            try: # Thao t√°c nh·∫π ƒë·ªÉ k√≠ch ho·∫°t
                recognizer.energy_threshold += 0
            except Exception as e_benign:
                 app.logger.debug(f"Benign operation for warm-up failed for {id(recognizer)}: {e_benign}")
            return
        try:
            with sr.AudioFile(SILENT_WAV_PATH) as source:
                recognizer.adjust_for_ambient_noise(source, duration=0.05)
            # app.logger.debug(f"Instance recognizer {id(recognizer)} ƒë√£ ƒë∆∞·ª£c warm-up.")
        except FileNotFoundError:
            app.logger.error(f"File WAV warm-up kh√¥ng t√¨m th·∫•y: {SILENT_WAV_PATH}.")
        except sr.WaitTimeoutError:
            app.logger.warning(f"L·ªói WaitTimeoutError khi warm-up recognizer: {id(recognizer)}")
        except Exception as e:
            app.logger.error(f"L·ªói khi warm-up instance recognizer {id(recognizer)}: {e}", exc_info=False)

    def warm_up_all_recognizers_in_pool(self):
        app.logger.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh warm-up recognizer pool...")
        threads = []
        current_recognizers = []
        with self.lock:
            current_recognizers = list(self.pool) # T·∫°o b·∫£n sao ƒë·ªÉ duy·ªát

        for r_instance in current_recognizers:
            thread = threading.Thread(target=self._warm_up_single_recognizer, args=(r_instance,), name=f"WarmUpThread-{id(r_instance)}")
            thread.daemon = True # Cho ph√©p tho√°t k·ªÉ c·∫£ khi thread ƒëang ch·∫°y
            thread.start()
            threads.append(thread)
        
        for thread in threads:
            thread.join(timeout=5.0)
        app.logger.info(f"Ho√†n t·∫•t qu√° tr√¨nh warm-up recognizer pool. S·ªë thread ƒëang ho·∫°t ƒë·ªông: {threading.active_count()}")

    def get_recognizer(self):
        with self.lock:
            if self.pool:
                return self.pool.pop(0)
            else:
                app.logger.info("Pool r·ªóng, t·∫°o recognizer m·ªõi.")
                new_recognizer = sr.Recognizer()
                # C√¢n nh·∫Øc warm-up recognizer m·ªõi n√†y ngay l·∫≠p t·ª©c (c√≥ th·ªÉ l√†m tƒÉng ƒë·ªô tr·ªÖ ch√∫t √≠t)
                # threading.Thread(target=self._warm_up_single_recognizer, args=(new_recognizer,)).start()
                return new_recognizer
    
    def return_recognizer(self, recognizer):
        with self.lock:
            if len(self.pool) < self.max_pool_size:
                self.pool.append(recognizer)

recognizer_pool = RecognizerPool()

# --- Bi·∫øn cho vi·ªác warm-up th√¥ng qua Ping ---
LAST_PING_TRIGGERED_WARM_UP_TIME = 0
MIN_INTERVAL_BETWEEN_PING_WARM_UPS_SECONDS = 4 * 60  # 4 ph√∫t
PING_WARM_UP_THREAD = None

# --- C√°c Flask Route ---
@app.route("/", methods=["GET"])
def index_route():
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] GET / t·ª´ {request.remote_addr}")
    return render_template("STT.html") # Render file HTML

@app.route("/api/status", methods=["GET"]) # ƒê·ªïi t√™n route "/" th√†nh "/api/status" cho r√µ r√†ng h∆°n
def status_route():
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] GET /api/status t·ª´ {request.remote_addr}")
    current_pool_size = 0
    with recognizer_pool.lock:
        current_pool_size = len(recognizer_pool.pool)
    return jsonify({
        "message": "STT Server is running.",
        "status": "healthy",
        "timestamp": time.time(),
        "recognizer_pool_size": current_pool_size,
        "active_threads": threading.active_count()
    }), 200

@app.route("/api/ping", methods=["GET"])
def ping_route():
    global LAST_PING_TRIGGERED_WARM_UP_TIME, PING_WARM_UP_THREAD
    ping_type = request.headers.get('X-Ping-Type', 'Unknown') # Cho ph√©p client t·ª± ƒë·ªãnh danh lo·∫°i ping
    
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] GET /api/ping t·ª´ {request.remote_addr} (Lo·∫°i: {ping_type})")
    
    current_time = time.time()
    # Ki·ªÉm tra v√† k√≠ch ho·∫°t warm-up n·∫øu c·∫ßn v√† kh√¥ng c√≥ thread warm-up n√†o ƒëang ch·∫°y
    if (PING_WARM_UP_THREAD is None or not PING_WARM_UP_THREAD.is_alive()) and \
       (current_time - LAST_PING_TRIGGERED_WARM_UP_TIME > MIN_INTERVAL_BETWEEN_PING_WARM_UPS_SECONDS):
        app.logger.info(f"üî• Triggering recognizer pool warm-up via ping...")
        PING_WARM_UP_THREAD = threading.Thread(target=recognizer_pool.warm_up_all_recognizers_in_pool, name="PingWarmUpThread")
        PING_WARM_UP_THREAD.daemon = True
        PING_WARM_UP_THREAD.start()
        LAST_PING_TRIGGERED_WARM_UP_TIME = current_time
    # else:
    #     app.logger.debug(f"Skipping warm-up: Thread running or too recent. Last warm-up: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(LAST_PING_TRIGGERED_WARM_UP_TIME))}")

    current_pool_size = 0
    with recognizer_pool.lock:
        current_pool_size = len(recognizer_pool.pool)

    return jsonify({
        "status": "alive",
        "timestamp": current_time,
        "recognizer_pool_size": current_pool_size,
        "message": "STT server ƒëang ho·∫°t ƒë·ªông v√† s·∫µn s√†ng.",
        "active_threads": threading.active_count()
    }), 200

@app.route("/api/transcribe", methods=["POST"])
def transcribe_route():
    request_id = str(uuid.uuid4())
    process_start_time = time.perf_counter()
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] [ReqID:{request_id}] POST /api/transcribe t·ª´ {request.remote_addr}")

    if "audio_data" not in request.files:
        app.logger.warning(f"[ReqID:{request_id}] Thi·∫øu file audio_data.")
        return jsonify({"error": "Missing audio file", "transcript": ""}), 400

    audio_file = request.files["audio_data"]

    if not audio_file.filename or not audio_file.filename.lower().endswith(".wav"):
        app.logger.warning(f"[ReqID:{request_id}] Lo·∫°i file kh√¥ng h·ª£p l·ªá: {audio_file.filename}")
        return jsonify({"error": "Invalid file type, .wav only", "transcript": ""}), 400

    temp_filename = f"{request_id}.wav"
    temp_path = os.path.join(TMP_DIR, temp_filename)
    
    transcript_text = ""
    error_message_detail = None # Chi ti·∫øt l·ªói n·∫øu c√≥
    final_status_code = 200

    try:
        audio_file.save(temp_path)
        # app.logger.info(f"[ReqID:{request_id}] File audio ƒë√£ l∆∞u t·∫°i {temp_path}")

        recognizer_instance = recognizer_pool.get_recognizer()
        # app.logger.info(f"[ReqID:{request_id}] ƒê√£ l·∫•y recognizer {id(recognizer_instance)}.")
        
        try:
            with sr.AudioFile(temp_path) as source:
                # app.logger.info(f"[ReqID:{request_id}] ƒêang record t·ª´ file...")
                audio_data = recognizer_instance.record(source)
                # app.logger.info(f"[ReqID:{request_id}] ƒê√£ record. B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng...")
            
                try:
                    transcript_text = recognizer_instance.recognize_google(audio_data, language="vi-VN")
                    app.logger.info(f"[ReqID:{request_id}] Nh·∫≠n d·∫°ng th√†nh c√¥ng: '{transcript_text}'")
                except sr.UnknownValueError:
                    app.logger.warning(f"[ReqID:{request_id}] Google SR kh√¥ng th·ªÉ hi·ªÉu audio.")
                    error_message_detail = "Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i t·ª´ audio."
                    # transcript_text ƒë·ªÉ tr·ªëng ho·∫∑c th√¥ng b√°o c·ª• th·ªÉ
                except sr.RequestError as e:
                    app.logger.error(f"[ReqID:{request_id}] L·ªói API SR: {e}", exc_info=True)
                    error_message_detail = f"L·ªói k·∫øt n·ªëi t·ªõi d·ªãch v·ª• Speech Recognition: {e}"
                    final_status_code = 503 # Service Unavailable
                except Exception as e_rec:
                    app.logger.error(f"[ReqID:{request_id}] L·ªói nh·∫≠n d·∫°ng kh√¥ng x√°c ƒë·ªãnh: {e_rec}", exc_info=True)
                    error_message_detail = "L·ªói m√°y ch·ªß kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh nh·∫≠n d·∫°ng."
                    final_status_code = 500
        finally:
            recognizer_pool.return_recognizer(recognizer_instance)
            # app.logger.info(f"[ReqID:{request_id}] ƒê√£ tr·∫£ recognizer {id(recognizer_instance)}.")

    except Exception as e_general:
        app.logger.error(f"[ReqID:{request_id}] L·ªói x·ª≠ l√Ω file: {e_general}", exc_info=True)
        error_message_detail = f"L·ªói m√°y ch·ªß khi x·ª≠ l√Ω file audio: {str(e_general)}"
        final_status_code = 500
    finally:
        if os.path.exists(temp_path):
            try:
                os.remove(temp_path)
                # app.logger.info(f"[ReqID:{request_id}] File t·∫°m {temp_path} ƒë√£ x√≥a.")
            except Exception as e_remove:
                app.logger.error(f"[ReqID:{request_id}] L·ªói x√≥a file t·∫°m {temp_path}: {e_remove}", exc_info=True)
        
        process_end_time = time.perf_counter()
        app.logger.info(f"[ReqID:{request_id}] X·ª≠ l√Ω trong {process_end_time - process_start_time:.4f}s. Status: {final_status_code}")

    if final_status_code == 200 and error_message_detail is None: # Th√†nh c√¥ng v√† kh√¥ng c√≥ l·ªói c·ª• th·ªÉ n√†o ƒë∆∞·ª£c ghi nh·∫≠n
        return jsonify({"transcript": transcript_text, "error": None}), 200
    else: # C√≥ l·ªói x·∫£y ra
        effective_error = error_message_detail if error_message_detail else "L·ªói m√°y ch·ªß STT kh√¥ng x√°c ƒë·ªãnh."
        return jsonify({"error": effective_error, "transcript": ""}), final_status_code

# --- Main Execution (cho Vercel) ---
application = app # Vercel t√¨m bi·∫øn 'application' ho·∫∑c 'app'

# Block if __name__ == "__main__": ch·ªâ d√πng cho ph√°t tri·ªÉn local
# Vercel s·∫Ω kh√¥ng ch·∫°y block n√†y.
if __name__ == "__main__":
    app.logger.info("Kh·ªüi ch·∫°y Flask development server (local)...")
    app.run(debug=False, host="0.0.0.0", port=int(os.environ.get("PORT", 5002)), threaded=True)
