import os
import uuid
import time
import logging
from flask import Flask, request, jsonify, render_template
import speech_recognition as sr
import threading
import wave  # ƒê·ªÉ t·∫°o file WAV im l·∫∑ng
import io    # ƒê·ªÉ l√†m vi·ªác v·ªõi file WAV trong b·ªô nh·ªõ (n·∫øu c·∫ßn)

# --- Kh·ªüi t·∫°o Flask App ---
app = Flask(__name__, template_folder="templates")
app.logger.setLevel(logging.INFO) # S·ª≠ d·ª•ng logger c·ªßa Flask
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(threadName)s - %(message)s')


# --- C·∫•u h√¨nh ---
app.config["MAX_CONTENT_LENGTH"] = 5 * 1024 * 1024  # Gi·ªõi h·∫°n upload 5MB
TMP_DIR = "/tmp"  # Vercel cho ph√©p ghi v√†o /tmp
if not os.path.exists(TMP_DIR):
    os.makedirs(TMP_DIR, exist_ok=True)

# --- File WAV im l·∫∑ng ƒë·ªÉ Warm-up Recognizer ---
SILENT_WAV_PATH = os.path.join(TMP_DIR, "silent_warmup_stt.wav")

def create_silent_wav(path, duration=0.1, sample_rate=16000):
    """T·∫°o m·ªôt file WAV im l·∫∑ng ng·∫Øn."""
    try:
        n_channels = 1
        sampwidth = 2  # 16-bit
        n_frames = int(duration * sample_rate)
        comp_type = "NONE"
        comp_name = "not compressed"

        with wave.open(path, 'wb') as wf:
            wf.setnchannels(n_channels)
            wf.setsampwidth(sampwidth)
            wf.setframerate(sample_rate)
            wf.setnframes(n_frames)
            wf.setcomptype(comp_type, comp_name)
            wf.writeframes(b'\x00\x00' * n_frames) # D·ªØ li·ªáu im l·∫∑ng (zero bytes)
        app.logger.info(f"File WAV im l·∫∑ng ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i: {path}")
        return True
    except Exception as e:
        app.logger.error(f"Kh√¥ng th·ªÉ t·∫°o file WAV im l·∫∑ng: {e}", exc_info=True)
        return False

# T·∫°o file WAV im l·∫∑ng khi server kh·ªüi ƒë·ªông
# ƒê·ªëi v·ªõi Vercel, /tmp l√† ephemeral, n√™n vi·ªác t·∫°o khi kh·ªüi ƒë·ªông l√† c·∫ßn thi·∫øt.
if not create_silent_wav(SILENT_WAV_PATH):
    app.logger.warning("Kh√¥ng th·ªÉ t·∫°o file WAV im l·∫∑ng. Vi·ªác warm-up recognizer c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng.")

# --- Pool cho Recognizer ---
class RecognizerPool:
    def __init__(self, pool_size=3, max_pool_size=10):
        self.initial_pool_size = pool_size
        self.max_pool_size = max_pool_size
        self.pool = []
        self.lock = threading.Lock() # Lock ƒë·ªÉ ƒë·∫£m b·∫£o thread-safe
        self._initialize_pool()
        self.warm_up_all_recognizers_in_pool() # Warm-up ngay sau khi kh·ªüi t·∫°o

    def _initialize_pool(self):
        """Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng recognizer trong pool."""
        with self.lock:
            # ƒê·∫£m b·∫£o pool tr·ªëng tr∆∞·ªõc khi kh·ªüi t·∫°o l·∫°i (n·∫øu c·∫ßn)
            self.pool = [sr.Recognizer() for _ in range(self.initial_pool_size)]
        app.logger.info(f"RecognizerPool ƒë√£ kh·ªüi t·∫°o v·ªõi {self.initial_pool_size} instance.")

    def _warm_up_single_recognizer(self, recognizer):
        """Warm-up m·ªôt instance recognizer c·ª• th·ªÉ."""
        if not os.path.exists(SILENT_WAV_PATH):
            try: # Th·ª≠ m·ªôt thao t√°c kh√¥ng ·∫£nh h∆∞·ªüng nhi·ªÅu ƒë·ªÉ k√≠ch ho·∫°t recognizer
                recognizer.energy_threshold = recognizer.energy_threshold + 0 
            except Exception as e_benign:
                 app.logger.debug(f"Benign operation for warm-up failed for {id(recognizer)}: {e_benign}")
            return

        try:
            with sr.AudioFile(SILENT_WAV_PATH) as source:
                # ƒêi·ªÅu ch·ªânh nhanh cho ti·∫øng ·ªìn xung quanh ƒë·ªÉ "ch·∫°m" v√†o c√°c th√†nh ph·∫ßn c·ªßa recognizer
                recognizer.adjust_for_ambient_noise(source, duration=0.05)
            # app.logger.debug(f"Instance recognizer {id(recognizer)} ƒë√£ ƒë∆∞·ª£c warm-up.")
        except FileNotFoundError:
            app.logger.error(f"File WAV warm-up kh√¥ng t√¨m th·∫•y: {SILENT_WAV_PATH}. Warm-up c√≥ th·ªÉ kh√¥ng hi·ªáu qu·∫£.")
        except sr.WaitTimeoutError:
             app.logger.warning(f"L·ªói WaitTimeoutError trong qu√° tr√¨nh warm-up recognizer: {id(recognizer)}")
        except Exception as e:
            app.logger.error(f"L·ªói khi warm-up instance recognizer {id(recognizer)}: {e}", exc_info=False)


    def warm_up_all_recognizers_in_pool(self):
        """Warm-up t·∫•t c·∫£ recognizer trong pool (s·ª≠ d·ª•ng thread)."""
        app.logger.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh warm-up recognizer pool...")
        threads = []
        
        with self.lock: # Sao ch√©p pool ƒë·ªÉ tr√°nh thay ƒë·ªïi trong l√∫c duy·ªát
            current_recognizers = list(self.pool)

        for r_instance in current_recognizers:
            thread = threading.Thread(target=self._warm_up_single_recognizer, args=(r_instance,), name=f"WarmUpThread-{id(r_instance)}")
            thread.start()
            threads.append(thread)
        
        for thread in threads:
            thread.join(timeout=5.0) # Ch·ªù thread ho√†n th√†nh v·ªõi timeout
        app.logger.info(f"Ho√†n t·∫•t qu√° tr√¨nh warm-up recognizer pool. S·ªë thread ƒëang ho·∫°t ƒë·ªông: {threading.active_count()}")

    def get_recognizer(self):
        """L·∫•y m·ªôt recognizer t·ª´ pool ho·∫∑c t·∫°o m·ªõi n·∫øu pool r·ªóng."""
        with self.lock:
            if self.pool:
                # app.logger.debug("L·∫•y recognizer t·ª´ pool.")
                return self.pool.pop(0) # L·∫•y t·ª´ ƒë·∫ßu danh s√°ch (FIFO-like)
            else:
                app.logger.info("Pool r·ªóng, t·∫°o recognizer m·ªõi.")
                new_recognizer = sr.Recognizer()
                # T√πy ch·ªçn: warm-up recognizer m·ªõi n√†y ngay l·∫≠p t·ª©c
                # self._warm_up_single_recognizer(new_recognizer) # C√≥ th·ªÉ l√†m tƒÉng ƒë·ªô tr·ªÖ ·ªü ƒë√¢y
                return new_recognizer
    
    def return_recognizer(self, recognizer):
        """Tr·∫£ recognizer v·ªÅ pool n·∫øu ch∆∞a ƒë·∫ßy."""
        with self.lock:
            if len(self.pool) < self.max_pool_size:
                # app.logger.debug("Tr·∫£ recognizer v·ªÅ pool.")
                self.pool.append(recognizer) # Th√™m v√†o cu·ªëi danh s√°ch
            # else:
                # app.logger.debug("Pool ƒë√£ ƒë·∫ßy, lo·∫°i b·ªè recognizer.")

# Kh·ªüi t·∫°o pool
recognizer_pool = RecognizerPool()

# --- Thread T·ª± ƒë·ªông Warm-up ƒê·ªãnh k·ª≥ ---
# L∆∞u √Ω: Hi·ªáu qu·∫£ tr√™n Vercel ph·ª• thu·ªôc v√†o lifecycle c·ªßa instance.
# Gi√∫p gi·ªØ recognizer "·∫•m" n·∫øu instance Vercel ƒë∆∞·ª£c gi·ªØ s·ªëng b·ªüi ping b√™n ngo√†i.
AUTO_WARM_UP_INTERVAL_SECONDS = 4 * 60  # 4 ph√∫t

def auto_warm_up_task():
    app.logger.info(f"Thread t·ª± ƒë·ªông warm-up ƒë√£ b·∫Øt ƒë·∫ßu. Chu k·ª≥: {AUTO_WARM_UP_INTERVAL_SECONDS} gi√¢y.")
    while True:
        time.sleep(AUTO_WARM_UP_INTERVAL_SECONDS)
        app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] üî• Th·ª±c hi·ªán warm-up recognizer pool ƒë·ªãnh k·ª≥...")
        recognizer_pool.warm_up_all_recognizers_in_pool()

# Ch·ªâ kh·ªüi ch·∫°y thread n·∫øu kh√¥ng ph·∫£i m√¥i tr∆∞·ªùng Vercel (n∆°i thread d√†i h·∫°n kh√¥ng ƒë·∫£m b·∫£o)
# Ho·∫∑c n·∫øu b·∫°n mu·ªën th·ª≠ nghi·ªám n√≥ tr√™n Vercel.
# M·ªôt c√°ch ti·∫øp c·∫≠n th√¢n thi·ªán h∆°n v·ªõi serverless l√† k√≠ch ho·∫°t warm-up t·ª´ /api/ping n·∫øu ƒë√£ l√¢u ch∆∞a warm-up.
IS_VERCEL_ENV = os.environ.get("VERCEL") == "1"
if not IS_VERCEL_ENV: 
    warm_up_bg_thread = threading.Thread(target=auto_warm_up_task, daemon=True, name="AutoWarmUpBGThread")
    warm_up_bg_thread.start()
else:
    app.logger.info("ƒêang ch·∫°y tr√™n Vercel, thread warm-up n·ªÅn d√†i h·∫°n b·ªã t·∫Øt. Warm-up khi kh·ªüi t·∫°o v√† c√≥ th·ªÉ qua ping.")

# --- C√°c Flask Route ---
@app.route("/", methods=["GET"])
def index_route():
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] GET / t·ª´ {request.remote_addr}")
    return render_template("STT.html") # ƒê·∫£m b·∫£o STT.html n·∫±m trong th∆∞ m·ª•c 'templates'

@app.route("/api/ping", methods=["GET"])
def ping_route():
    ping_type = "Unknown"
    if request.headers.get('X-Health-Check') == 'true':
        ping_type = "Health-Check (Client UI)"
    elif request.headers.get('X-Keep-Alive') == 'true':
        ping_type = "Keep-Alive (Client UI)"
    # Th√™m header n·∫øu ESP32 g·ª≠i ping (v√≠ d·ª•: 'X-ESP32-Ping': 'true')
    elif request.headers.get('X-ESP32-Ping') == 'true':
        ping_type = "Keep-Alive (ESP32)"
    
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] GET /api/ping t·ª´ {request.remote_addr} (Lo·∫°i: {ping_type})")
    
    current_pool_size = 0
    with recognizer_pool.lock: # Truy c·∫≠p pool size m·ªôt c√°ch an to√†n
        current_pool_size = len(recognizer_pool.pool)

    return jsonify({
        "status": "alive",
        "timestamp": time.time(),
        "recognizer_pool_size": current_pool_size,
        "message": "STT server ƒëang ho·∫°t ƒë·ªông v√† s·∫µn s√†ng.",
        "active_threads": threading.active_count() # ƒê·ªÉ debug vi·ªác s·ª≠ d·ª•ng thread
    }), 200

@app.route("/api/transcribe", methods=["POST"])
def transcribe_route():
    request_id = str(uuid.uuid4()) # ID duy nh·∫•t cho m·ªói request
    process_start_time = time.perf_counter() # ƒêo th·ªùi gian x·ª≠ l√Ω
    app.logger.info(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] [ReqID:{request_id}] POST /api/transcribe t·ª´ {request.remote_addr}")

    if "audio_data" not in request.files:
        app.logger.warning(f"[ReqID:{request_id}] Thi·∫øu file audio_data trong request.")
        return jsonify({"error": "Missing audio file", "transcript": ""}), 400

    audio_file = request.files["audio_data"]

    if not audio_file.filename or not audio_file.filename.lower().endswith(".wav"):
        app.logger.warning(f"[ReqID:{request_id}] Lo·∫°i file kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ t√™n file. Nh·∫≠n: {audio_file.filename}")
        return jsonify({"error": "Invalid file type, .wav only", "transcript": ""}), 400

    # T√™n file t·∫°m th·ªùi d·ª±a tr√™n request_id ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t
    temp_filename = f"{request_id}.wav"
    temp_path = os.path.join(TMP_DIR, temp_filename)
    
    transcript_text = ""
    final_status_code = 200 # M·∫∑c ƒë·ªãnh l√† th√†nh c√¥ng

    try:
        audio_file.save(temp_path)
        app.logger.info(f"[ReqID:{request_id}] File audio ƒë√£ l∆∞u t·∫°i {temp_path}")

        recognizer_instance = recognizer_pool.get_recognizer()
        app.logger.info(f"[ReqID:{request_id}] ƒê√£ l·∫•y instance recognizer {id(recognizer_instance)} t·ª´ pool.")
        
        try:
            with sr.AudioFile(temp_path) as source:
                app.logger.info(f"[ReqID:{request_id}] ƒêang ghi √¢m (record) t·ª´ file audio...")
                # T√πy ch·ªçn: recognizer_instance.adjust_for_ambient_noise(source, duration=0.2)
                audio_data = recognizer_instance.record(source)
                app.logger.info(f"[ReqID:{request_id}] ƒê√£ record audio. B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng...")
            
            try:
                transcript_text = recognizer_instance.recognize_google(audio_data, language="vi-VN")
                app.logger.info(f"[ReqID:{request_id}] Nh·∫≠n d·∫°ng th√†nh c√¥ng: '{transcript_text}'")
            except sr.UnknownValueError:
                app.logger.warning(f"[ReqID:{request_id}] Google Speech Recognition kh√¥ng th·ªÉ hi·ªÉu audio.")
                transcript_text = "" # Ho·∫∑c "[Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng]"
            except sr.RequestError as e:
                app.logger.error(f"[ReqID:{request_id}] L·ªói API Speech Recognition: {e}", exc_info=True)
                transcript_text = f"[L·ªói k·∫øt n·ªëi API Speech: {e}]"
                final_status_code = 503 # Service Unavailable
            except Exception as e_rec:
                app.logger.error(f"[ReqID:{request_id}] L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh nh·∫≠n d·∫°ng: {e_rec}", exc_info=True)
                transcript_text = "[L·ªói x·ª≠ l√Ω gi·ªçng n√≥i kh√¥ng x√°c ƒë·ªãnh]"
                final_status_code = 500
        finally:
            recognizer_pool.return_recognizer(recognizer_instance)
            app.logger.info(f"[ReqID:{request_id}] ƒê√£ tr·∫£ instance recognizer {id(recognizer_instance)} v·ªÅ pool.")

    except Exception as e_general:
        app.logger.error(f"[ReqID:{request_id}] L·ªói x·ª≠ l√Ω file ho·∫∑c l·ªói chung: {e_general}", exc_info=True)
        final_status_code = 500 # Internal Server Error
        # ƒê·∫£m b·∫£o tr·∫£ v·ªÅ JSON error object
        return jsonify({"error": f"L·ªói server khi x·ª≠ l√Ω file: {str(e_general)}", "transcript": ""}), final_status_code

    finally:
        if os.path.exists(temp_path):
            try:
                os.remove(temp_path)
                app.logger.info(f"[ReqID:{request_id}] File t·∫°m {temp_path} ƒë√£ ƒë∆∞·ª£c x√≥a.")
            except Exception as e_remove:
                app.logger.error(f"[ReqID:{request_id}] L·ªói khi x√≥a file t·∫°m {temp_path}: {e_remove}", exc_info=True)
        
        process_end_time = time.perf_counter()
        app.logger.info(f"[ReqID:{request_id}] Request ƒë∆∞·ª£c x·ª≠ l√Ω trong {process_end_time - process_start_time:.4f} gi√¢y. Status: {final_status_code}")

    if final_status_code != 200:
         # N·∫øu c√≥ l·ªói ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n trong qu√° tr√¨nh nh·∫≠n d·∫°ng, tr·∫£ v·ªÅ th√¥ng tin l·ªói ƒë√≥
        return jsonify({"error": transcript_text if transcript_text.startswith("[L·ªói") else "L·ªói m√°y ch·ªß STT kh√¥ng x√°c ƒë·ªãnh", "transcript": ""}), final_status_code
    else:
        return jsonify({"transcript": transcript_text, "error": None}), 200


# --- Main Execution (cho Vercel v√† local) ---
application = app  # Vercel t√¨m bi·∫øn 'application' ho·∫∑c 'app'

if __name__ == "__main__":
    # Block n√†y ch·∫°y khi th·ª±c thi script tr·ª±c ti·∫øp (v√≠ d·ª•: ph√°t tri·ªÉn local)
    # Vercel kh√¥ng d√πng block n√†y ƒë·ªÉ serve, n√≥ d√πng callable 'application'.
    app.logger.info("Kh·ªüi ch·∫°y Flask development server...")
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c 'templates' v·ªõi file STT.html t·ªìn t·∫°i khi ch·∫°y local.
    # Thread warm-up s·∫Ω kh·ªüi ch·∫°y n·∫øu kh√¥ng ph·∫£i m√¥i tr∆∞·ªùng Vercel.
    app.run(debug=True, host="0.0.0.0", port=int(os.environ.get("PORT", 5002)), threaded=True)
    # threaded=True cho ph√©p x·ª≠ l√Ω nhi·ªÅu request ƒë·ªìng th·ªùi khi test local.
